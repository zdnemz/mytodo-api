openapi: 3.0.0
info:
  title: MyTodo API
  description: API for managing tasks and user authentication in the MyTodo app.
  version: 1.0.0
servers:
  - url: '{protocol}://{host}:{port}'
    variables:
      protocol:
        enum:
          - https
          - http
        default: http
      host:
        description: host of API server.
        default: localhost
      port:
        description: port of API server.
        default: '3000'

paths:
  /api/health:
    get:
      summary: Health check
      description: Check the health of the API.
      responses:
        '200':
          description: Health check successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    default: true
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: 'health ok!'

  /api/auth/register:
    post:
      summary: Register a new user
      description: Register a new user with email, username, and password.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: 'Username for the new user'
                  example: 'johndoe'
                email:
                  type: string
                  description: 'Email address for the new user'
                  example: 'johndoe@example.com'
                password:
                  type: string
                  description: 'Password for the new user'
                  example: 'Password123'
                name:
                  type: string
                  description: 'Full name of the new user'
                  example: 'John Doe'
                birthdate:
                  type: string
                  format: date
                  description: 'Birthdate of the new user'
                  example: '1990-01-01'
                gender:
                  type: string
                  enum: [male, female, unknown]
                  description: 'Gender of the new user'
                  example: 'male'
              required:
                - username
                - email
                - password
                - name
                - birthdate
                - gender
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    default: true
                  code:
                    type: integer
                    example: 201
                  message:
                    type: string
                    example: 'User has been created successfully.'
        '400':
          description: User already registered
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    default: false
                  code:
                    type: integer
                    example: 400
                  message:
                    type: string
                    example: 'User already registered.'

  /api/auth/login:
    post:
      summary: User login
      description: Log in a user with email/username and password.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                identifier:
                  type: string
                  description: 'Email or Username'
                  example: 'johndoe@example.com'
                password:
                  type: string
                  description: "User's password"
                  example: 'Password123'
              required:
                - identifier
                - password
      responses:
        '200':
          description: Successfully logged in
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    default: true
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: 'Login successfully.'
        '401':
          description: Invalid username or password
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    default: false
                  code:
                    type: integer
                    example: 401
                  message:
                    type: string
                    example: 'Invalid credentials..'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    default: false
                  code:
                    type: integer
                    example: 404
                  message:
                    type: string
                    example: 'User not found.'

  /api/tasks/create:
    post:
      summary: create a new task
      description: create a new task with valid user.
      security:
        - accessToken: []

      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: 'Title for the new task'
                  example: 'Some title'
                  minLength: 3
                  maxLength: 100
                description:
                  type: string
                  description: 'Description of the task (optional)'
                  example: 'Some description'
                  maxLength: 500
                  nullable: true
                status:
                  type: string
                  description: 'Status of the new task'
                  enum: ['pending', 'in_progress', 'completed']
                  example: 'pending'
                dueDate:
                  type: string
                  format: date
                  description: 'Due date of the new task (optional, nullable)'
                  example: '2022-01-01'
                  nullable: true
              required:
                - title
                - status

      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    default: true
                  code:
                    type: integer
                    example: 201
                  message:
                    type: string
                    example: 'User has been created successfully.'
        '400':
          description: User already registered
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    default: false
                  code:
                    type: integer
                    example: 400
                  message:
                    type: string
                    example: 'User already registered.'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /api/tasks:
    get:
      summary: Retrieve all tasks
      description: Retrieve all tasks associated with the authenticated user.
      security:
        - accessToken: [] # Requires accessToken for authentication
      responses:
        '200':
          description: Tasks retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    default: true
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: 'Tasks retrieved successfully.'
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        _id:
                          type: string
                          example: '66fd11097117de26aae7cedf'
                        title:
                          type: string
                          example: 'Test Task'
                        description:
                          type: string
                          example: 'This is a test task.'
                        dueDate:
                          type: string
                          format: date-time
                          example: '2024-10-10T00:00:00Z'
                        status:
                          type: string
                          example: 'pending'
                        userId:
                          type: string
                          example: '66fd11097117de26aae7ceda'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: No tasks found for this user
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    default: false
                  code:
                    type: integer
                    example: 404
                  message:
                    type: string
                    example: 'No tasks found for this user.'

  /api/tasks/{taskId}:
    get:
      summary: Get a task by ID
      description: Retrieve a task using its unique ID.
      security:
        - accessToken: []
      parameters:
        - in: path
          name: taskId
          required: true
          description: ID of the task to delete
          schema:
            type: string
            example: '66fd11097117de26aae7cedf'
      responses:
        '200':
          description: Task retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    default: true
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: 'Tasks retrieved successfully.'
                  data:
                    type: object
                    properties:
                      _id:
                        type: string
                        example: '66fd11097117de26aae7cedf'
                      title:
                        type: string
                        example: 'Test Task'
                      description:
                        type: string
                        example: 'This is a test task.'
                      dueDate:
                        type: string
                        format: date-time
                        example: '2024-10-10T00:00:00Z'
                      status:
                        type: string
                        example: 'pending'
                      userId:
                        type: string
                        example: '66fd11097117de26aae7ceda'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Task not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    default: false
                  code:
                    type: integer
                    example: 404
                  message:
                    type: string
                    example: 'Task is not found by the id.'

    delete:
      summary: Delete a task by ID
      description: Delete a task by its unique ID, ensuring that the task belongs to the authenticated user.
      security:
        - accessToken: [] # Requires accessToken for authentication
      parameters:
        - in: path
          name: taskId
          required: true
          description: ID of the task to delete
          schema:
            type: string
            example: '66fd11097117de26aae7cedf'
      responses:
        '200':
          description: Task deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    default: true
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: 'Task deleted successfully.'
        '400':
          description: Missing task ID
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    default: false
                  code:
                    type: integer
                    example: 400
                  message:
                    type: string
                    example: 'Missing task id.'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

        '404':
          description: Task not found or not authorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    default: false
                  code:
                    type: integer
                    example: 404
                  message:
                    type: string
                    example: 'Task not found or not authorized to delete.'

    put:
      summary: Update a task by ID
      description: Update a task by its unique ID, ensuring that the task belongs to the authenticated user.
      security:
        - accessToken: [] # Requires accessToken for authentication
      parameters:
        - in: path
          name: taskId
          required: true
          description: ID of the task to delete
          schema:
            type: string
            example: '66fd11097117de26aae7cedf'

      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: 'Title for the new task'
                  example: 'Some title'
                  minLength: 3
                  maxLength: 100
                description:
                  type: string
                  description: 'Description of the task (optional)'
                  example: 'Some description'
                  maxLength: 500
                  nullable: true
                status:
                  type: string
                  description: 'Status of the new task'
                  enum: ['pending', 'in_progress', 'completed']
                  example: 'pending'
                dueDate:
                  type: string
                  format: date
                  description: 'Due date of the new task (optional, nullable)'
                  example: '2022-01-01'
                  nullable: true

      responses:
        '200':
          description: Task deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    default: true
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: 'Task deleted successfully.'
        '400':
          description: Missing task ID
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    default: false
                  code:
                    type: integer
                    example: 400
                  message:
                    type: string
                    example: 'Missing task id.'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

        '404':
          description: Task not found or not authorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    default: false
                  code:
                    type: integer
                    example: 404
                  message:
                    type: string
                    example: 'Task not found or not authorized to delete.'

components:
  securitySchemes:
    accessToken:
      type: apiKey
      in: cookie
      name: accessToken
      description: 'Authentication token for user session.'

  responses:
    UnauthorizedError:
      description: Unauthorized request due to missing or Invalid credentials..
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
                default: false
              code:
                type: integer
                example: 401
              message:
                type: string
                example: 'Unauthorized access.'
